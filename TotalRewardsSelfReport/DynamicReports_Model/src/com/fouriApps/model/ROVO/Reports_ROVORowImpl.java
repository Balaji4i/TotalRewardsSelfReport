package com.fouriApps.model.ROVO;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 20 16:46:31 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Reports_ROVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        Report {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getReport();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setReport((String)value);
            }
        }
        ,
        ReportPath {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getReportPath();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setReportPath((String)value);
            }
        }
        ,
        ReportsFormat {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getReportsFormat();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setReportsFormat((String)value);
            }
        }
        ,
        Functions_VO1 {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getFunctions_VO1();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LookUp_ROVO1 {
            public Object get(Reports_ROVORowImpl obj) {
                return obj.getLookUp_ROVO1();
            }

            public void put(Reports_ROVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(Reports_ROVORowImpl object);

        public abstract void put(Reports_ROVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int REPORT = AttributesEnum.Report.index();
    public static final int REPORTPATH = AttributesEnum.ReportPath.index();
    public static final int REPORTSFORMAT = AttributesEnum.ReportsFormat.index();
    public static final int FUNCTIONS_VO1 = AttributesEnum.Functions_VO1.index();
    public static final int LOOKUP_ROVO1 = AttributesEnum.LookUp_ROVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Reports_ROVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Report.
     * @return the Report
     */
    public String getReport() {
        if(null == getAttributeInternal(REPORT)){
            return getFunctions_VO1().first().getAttribute("FuncId").toString();
        }
        else{
             return (String) getAttributeInternal(REPORT);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Report.
     * @param value value to set the  Report
     */
    public void setReport(String value) {
        setAttributeInternal(REPORT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ReportPath.
     * @return the ReportPath
     */
    public String getReportPath() {
        if(null == getAttributeInternal(REPORTPATH)){
            return getFunctions_VO1().first().getAttribute("PagePath").toString();
        }
        else{
             return (String) getAttributeInternal(REPORTPATH);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ReportPath.
     * @param value value to set the  ReportPath
     */
    public void setReportPath(String value) {
        setAttributeInternal(REPORTPATH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ReportsFormat.
     * @return the ReportsFormat
     */
    public String getReportsFormat() {
        if(null == getAttributeInternal(REPORTSFORMAT)){
            return getLookUp_ROVO1().first().getAttribute("LookupValueName").toString();
        }
        else{
             return (String) getAttributeInternal(REPORTSFORMAT);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ReportsFormat.
     * @param value value to set the  ReportsFormat
     */
    public void setReportsFormat(String value) {
        setAttributeInternal(REPORTSFORMAT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> Functions_VO1.
     */
    public RowSet getFunctions_VO1() {
        return (RowSet)getAttributeInternal(FUNCTIONS_VO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LookUp_ROVO1.
     */
    public RowSet getLookUp_ROVO1() {
        return (RowSet)getAttributeInternal(LOOKUP_ROVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
